generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           String   @id @db.Char(16)
  name         String   @db.VarChar(35)
  pronoun      String?  @db.VarChar(35)
  description  String?  @db.VarChar(128)
  avatar       String?  @db.VarChar(64)
  country      String?  @db.Char(3)
  phone        String?  @unique @db.VarChar(32)
  score        Int      @default(0) @db.UnsignedInt
  discoverable Boolean  @default(false)
  createdAt    DateTime @default(now())

  lat               Decimal?  @db.Decimal(9, 7)
  lon               Decimal?  @db.Decimal(10, 7)
  locationUpdatedAt DateTime?

  sessions      session[]
  subscriptions pageSubscription[]
  pages         pageManager[]
  posts         post[]
  likes         like[]
  followers     follow[]           @relation(name: "followers")
  following     follow[]           @relation(name: "following")
}

model session {
  id        String    @id @db.Char(16)
  token     String    @unique @db.Char(128)
  address   String    @db.VarChar(64)
  primary   Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(16)
}

model follow {
  following   user   @relation(name: "followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.Char(16)

  follower   user   @relation(name: "following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @db.Char(16)

  createdAt DateTime @default(now())

  @@id([followingId, followerId])
}

model phoneAuth {
  id        String    @id @db.Char(16)
  number    String    @db.VarChar(32)
  code      String    @db.Char(8)
  address   String    @db.VarChar(64)
  attempts  Int       @default(0) @db.UnsignedTinyInt
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model phoneBlock {
  number    String   @id @db.VarChar(32)
  createdAt DateTime @default(now())
}

model page {
  id          String   @id @db.Char(16)
  name        String   @db.VarChar(35)
  description String?  @db.VarChar(128)
  country     String?  @db.Char(3)
  lat         Decimal? @db.Decimal(9, 7)
  lon         Decimal? @db.Decimal(10, 7)
  url         String?  @db.VarChar(64)
  email       String?  @db.VarChar(64)
  phone       String?  @db.VarChar(32)
  createdAt   DateTime @default(now())

  subscribers pageSubscription[]
  managers    pageManager[]
  posts       post[]
}

model pageSubscription {
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(16)

  page   page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String @db.Char(16)

  createdAt DateTime @default(now())

  @@id([userId, pageId])
}

model pageManager {
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(16)

  page   page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String @db.Char(16)

  owner     Boolean
  createdAt DateTime @default(now())

  @@id([userId, pageId])
}

model post {
  id        String    @id @db.Char(16)
  content   String    @db.VarChar(2000)
  lat       Decimal?  @db.Decimal(9, 7)
  lon       Decimal?  @db.Decimal(10, 7)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  user   user?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.Char(16)

  page   page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String? @db.Char(16)

  likes like[]
}

model like {
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(16)

  post   post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.Char(16)

  createdAt DateTime @default(now())

  @@id([userId, postId])
}
